import sys
import os
import io
import struct
import random
import alphv3_sphx_util
import alphv3_sphx_hash


KEY_LEN = 16
NOISE_MIN_LEN = 1
NOISE_MAX_LEN = 10


def gen_key_string(key: bytes) -> str:
    """Generate string for encryption key"""

    crc = alphv3_sphx_hash.crc16(key)
    crc = alphv3_sphx_hash.crc16_finish(crc)

    noise_len = random.randrange(NOISE_MIN_LEN, NOISE_MAX_LEN + 1)
    noise = os.urandom(noise_len)

    data = (key + alphv3_sphx_util.get_data_blob(noise) +
            crc.to_bytes(2, byteorder='little'))

    return alphv3_sphx_util.encode_data(data)


#
# Main
#
num_strings = 1

if len(sys.argv) > 1:
    n = int(sys.argv[1])
    if n > num_strings:
        num_strings = n

try:
    with io.open('cfg_key.bin', 'rb') as f:
        key = f.read(KEY_LEN)
    if len(key) != KEY_LEN:
        raise ValueError('Invalid key length')

except FileNotFoundError:

    key = os.urandom(KEY_LEN)
    with io.open('cfg_key.bin', 'wb') as f:
        f.write(key)
    print('The encryption key has been generated and saved')

for _ in range(num_strings):

    # Generate string for encryption key
    s = gen_key_string(key)
    print(s)

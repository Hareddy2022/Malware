import sys
import io
import os
import struct
import binascii


# Metadata
METADATA_SIZE = 0xB2

AES_IV_POS = 0x14
AES_IV_SIZE = 16
PADDING_SIZE_POS = 0x24
ENC_KEY_DATA_POS = 0x28
RSA_KEY_SIZE = 128
ADDITIONAL_DATA_SIZE_POS = 0xA8
ATTACKER_ID_POS = 0xAC
ATTACKER_ID_SIZE = 6


def print_encfile_info(filename: str) -> bool:
    """Get encrypted file info"""

    with io.open(filename, 'rb') as f:

        # Read metadata
        try:
            f.seek(-METADATA_SIZE, 2)
        except OSError:
            return False

        metadata = f.read(METADATA_SIZE)

        # Attacker ID
        attacker_id = metadata[ATTACKER_ID_POS :
                               ATTACKER_ID_POS + ATTACKER_ID_SIZE]

        # Encrypted key data
        enc_key_data = metadata[ENC_KEY_DATA_POS :
                                ENC_KEY_DATA_POS + RSA_KEY_SIZE]

        # Additional data size including metadata
        additional_data_size, = struct.unpack_from('<L', metadata,
                                                   ADDITIONAL_DATA_SIZE_POS)
        if additional_data_size <= METADATA_SIZE:
            return False

        # Read end block with encryption info
        endblock_size = additional_data_size - METADATA_SIZE
        if (endblock_size & 0xF) != 0:
            return False

        try:
            f.seek(-additional_data_size, 2)
        except OSError:
            return False
        
        enc_endblock_data = f.read(endblock_size)

        # AES IV
        aes_iv = metadata[AES_IV_POS : AES_IV_POS + AES_IV_SIZE]
        # Padding size
        padding_size, = struct.unpack_from('<L', metadata, PADDING_SIZE_POS)

    print('attacker id:', binascii.hexlify(attacker_id).decode().upper())
    print('additional data size: %08X' % additional_data_size)
    print('end block size: %08X' % endblock_size)
    print('padding size: %d' % padding_size)

    return True


#
# Main
#
if len(sys.argv) != 2:
    print('Usage:', os.path.basename(sys.argv[0]), 'filename')
    sys.exit(0)

filename = sys.argv[1]

# Get encrypted file info
if not print_encfile_info(filename):
    print('Error: file not encrypted or damaged')
    sys.exit(1)

import sys
import io
import os
import base64
from Crypto.Cipher import AES


END_MARKERS = [
    b'AppData',
    b'Studio',
    b'tasklist',
    b'Registery',
    b'Version',
    b'Windows',
    b'Library'
]

END_MARKER = b'U12H6AN=='


KEY_LEN = 32
NONCE_LEN = 12


def decode_and_decrypt(enc_data: bytes,
                       key: bytes, nonce: bytes,
                       end_markers: list) -> bytes:
    """Decode and decrypt data"""

    enc_data = base64.decodebytes(enc_data)

    cipher = AES.new(key, AES.MODE_GCM, nonce)

    tag = enc_data[-16:]

    try:
        enc_data = cipher.decrypt_and_verify(enc_data[:-16], tag)
    except ValueError:
        return None

    enc_data = base64.decodebytes(enc_data)

    for end_marker in end_markers:
        i = enc_data.find(end_marker)
        if i >= 0:
            return enc_data[:i]

    return None


def decrypt_data(enc_data: bytes, key: bytes, nonces: bytes) -> bytes:
    """Decrypt data"""

    enc_data = decode_and_decrypt(enc_data, key, nonces[NONCE_LEN:],
                                  [END_MARKER])
    if enc_data is None:
        return None

    return decode_and_decrypt(enc_data, key, nonces[:NONCE_LEN], END_MARKERS)


#
# Main
#
if len(sys.argv) != 2:
    print('Usage:', os.path.basename(sys.argv[0]), 'filename')
    sys.exit(0)

with io.open('key.bin', 'rb') as f:
    key = f.read(KEY_LEN)

with io.open('nonces.bin', 'rb') as f:
    nonces = f.read(2 * NONCE_LEN)

filename = sys.argv[1]
with io.open(filename, 'rb') as f:
    enc_data = f.read()

data = decrypt_data(enc_data, key, nonces)
if data is None:
    print('Failed to decrypt')
    sys.exit(1)

new_filename = filename + '.dec'
with io.open(new_filename, 'wb') as f:
    f.write(data)

print('Done!')
